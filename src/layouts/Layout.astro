---
export interface Props {
  title: string;
}

import "../styles/tw.css";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <script is:inline>
      (function () {
        const savedTheme = localStorage.getItem("theme");
        const isDark = savedTheme ? savedTheme === "dark" : 
          window.matchMedia("(prefers-color-scheme: dark)").matches;

        document.documentElement.classList.toggle("dark", isDark);
      })();
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
        <link
          rel="icon"
          type="image/svg+xml"
          href="/favicon.svg"
        />
        <meta name="title" content={title} />
        <meta property="og:type" content="website" />
        <meta property="og:title" content={title} />
        <meta property="og:image" content="/meta.png" />
        <meta property="twitter:card" content="summary_large_image" />
        <meta property="twitter:title" content={title} />
        <meta property="twitter:image" content="/meta.png" />
      <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&family=Geist+Mono:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css"
      integrity="sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn"
      crossorigin="anonymous"
    />
    <title>{title}</title>
    <style>
      body * {
        opacity: 0;
        transform: translateY(20px);
      }

      .animate-element {
        transition:
          opacity 0.6s ease-out,
          transform 0.6s ease-out;
      }

      .animate-element.visible {
        opacity: 1;
        transform: translateY(0);
      }
    </style>
  </head>
  <body
    class="flex flex-col break-all min-h-screen items-center bg-gruvbox-light-bg text-gruvbox-light dark:bg-gruvbox-dark-bg dark:text-gruvbox-dark"
  >
    <div class="w-full sm:w-4/5 py-6 sm:py-8 md:py-16 lg:w-3/5 px-6 md:w-2/3">
      <nav class="flex justify-between gap-4 mb-8">
        <div class="flex gap-4">
          <a class="navlink" href="/">Home</a>
          <a class="navlink" href="/posts">Posts</a>
        </div>
        <p class="cursor-pointer" id="theme-toggle">toggle theme</p>
      </nav>
      <main class="break-keep">
        <slot />
      </main>
    </div>
  </body>
  <script>
    (function () {
      function setupPageAnimations() {
        const body = document.body;
        const elementsToAnimate: Element[] = [];

        function collectElements(
          parent: Element,
          currentLevel: number,
          maxLevel: number,
        ) {
          if (currentLevel > maxLevel) return;

          Array.from(parent.children).forEach((child) => {
            if (child.tagName !== "SCRIPT") {
              elementsToAnimate.push(child);
              collectElements(child, currentLevel + 1, maxLevel);
            }
          });
        }

        collectElements(document.body, 1, 4);

        elementsToAnimate.forEach((el) => {
          el.classList.add("animate-element");
        });

        setTimeout(() => {
          elementsToAnimate.forEach((el, index) => {
            setTimeout(() => {
              el.classList.add("visible");
            }, index * 200);
          });
        }, 50);
      }

      setupPageAnimations();

      const markdownContent = document.querySelector(".markdown-content");
      if (!markdownContent) {
        setupPageAnimations();
        return;
      }

      const headings = markdownContent.querySelectorAll("h1, h2, h3, h4");
      if (headings.length === 0) {
        setupPageAnimations();
        return;
      }

      interface HeadingData {
        id: string;
        text: string | null;
      }
      const headingData: HeadingData[] = [];
      headings.forEach((heading, index) => {
        if (!heading.id) {
          heading.id = `heading-${index}`;
        }
        headingData.push({
          id: heading.id,
          text: heading.textContent,
        });
      });

      const timelineContainer = document.createElement("div");
      timelineContainer.className = "timeline-container";

      const timelineItems = document.createElement("div");
      timelineItems.className = "timeline-items flex flex-col items-end";

      headingData.forEach((heading) => {
        const timelineItem = document.createElement("div");
        timelineItem.className = "timeline-item";
        timelineItem.setAttribute("data-section", heading.id);

        const timelineLink = document.createElement("a");
        timelineLink.href = `#${heading.id}`;
        timelineLink.className = "timeline-link";

        const timelineDot = document.createElement("div");
        timelineDot.className = "timeline-dot bg-gruvbox-light-bg-lighter";

        const timelineText = document.createElement("span");
        timelineText.className = "timeline-text text-sm";
        timelineText.textContent = heading.text;

        timelineLink.appendChild(timelineDot);
        timelineItem.appendChild(timelineLink);
        timelineItem.appendChild(timelineText);
        timelineItems.appendChild(timelineItem);
      });

      timelineContainer.appendChild(timelineItems);
      document.body.appendChild(timelineContainer);

      const timelineItemElements = document.querySelectorAll(".timeline-item");
      const sectionIds = Array.from(timelineItemElements).map((item) =>
        item.getAttribute("data-section"),
      );
      const sections = sectionIds.map((id) =>
        document.getElementById(id as string),
      );

      function getElementTop(element: HTMLElement): number {
        let top = 0;
        do {
          top += element.offsetTop || 0;
          element = element.offsetParent as HTMLElement;
        } while (element);
        return top;
      }

      function getActiveSection() {
        const scrollPosition = window.scrollY;
        for (let i = 0; i < sections.length; i++) {
          const section = sections[i];
          const sectionTop = getElementTop(section as HTMLElement);
          if (sectionTop > scrollPosition + 100) {
            return i === 0 ? sections[0] : sections[i - 1];
          }
        }
        return sections[sections.length - 1];
      }

      function updateActiveTimelineItem() {
        const activeSection = getActiveSection();
        const activeId = activeSection?.id;
        timelineItemElements.forEach((item) => {
          if (item.getAttribute("data-section") === activeId) {
            item.classList.add("active");
          } else {
            item.classList.remove("active");
          }
        });
      }

      window.addEventListener("scroll", updateActiveTimelineItem);
      updateActiveTimelineItem();
    })();

    document
      .getElementById("theme-toggle")
      ?.addEventListener("click", function () {
        const isDark = document.documentElement.classList.toggle("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
  </script>
</html>
